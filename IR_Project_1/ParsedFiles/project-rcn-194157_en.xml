<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://cordis.europa.eu">
  <rcn>194157</rcn>
  <acronym>BEBA</acronym>
  <objective>BEBA challenges a very ambitious goal: can we deploy wire-speed-reactive control/processing tasks inside the network switches, while retaining i) centralized control of their specification/operation, ii) high performance and scalability, and - crucial for real world adoption - iii) platform independency, i.e., consistency with the vendors’ need for closed platforms? 
BEBA’s answer revolves around the identification of a programming abstraction in the form of eXtended Finite State Machines (XFSMs). Via platform-agnostic XFSM “programs”, operators and enterprises will deploy not only static packet forwarding/processing rules (as in current OpenFlow devices), but will be able to specify and wire-speed enforce how such rules shall dynamically adapt to the time-varying flow and traffic behavior, i.e. in reaction to packet-level events, internal statistics changes, link/queue conditions, etc. 
BEBA holds the promise for future-proof, efficient, and easy to administer network devices capable to be repurposed so as to meet emerging needs. Indeed, BEBA’s approach, extended with node-level processing primitives made usable through our programming abstraction, brings about key benefits in the ability to i) “software-define” middlebox-type network functions well beyond static packet forwarding, with specific project’s attention to the monitoring and network security applications’ domains, and in the possibility to ii) address the current shortcomings revolving around the high latency and large overhead of centralized network control tasks. 
Finally, BEBA commits to a concrete and pragmatic innovation strategy. Short-time impact and standardization will be attempted by i) casting (part of) the BEBA approach as OpenFlow’s extensions; ii) making its implementation feasible over merchant-silicon chipsets currently found in commodity switches, and iii) releasing an open source virtual BEBA switch for the benefits of the Network Functions Virtualization community.</objective>
  <title>Behavioral Based Forwarding</title>
<identifier>H2020ICT20141</identifier>
</project>
